def save(self):
        db = get_db()
        cursor = db.cursor()
        cursor.execute(
            "INSERT INTO posts (autor, contenido, fecha_creacion) VALUES (%s, %s, %s) RETURNING id",
            (self.autor, self.contenido, self.fecha_creacion)
        )
        post_id = cursor.fetchone()[0]
        db.commit()
        cursor.close()
        return post_id


Paso 1: db = get_db()

    Llama a la función get_db() para obtener la conexión a la base de datos. Esta conexión permite ejecutar consultas SQL sobre la base de datos de forma persistente mientras esté abierta.

Paso 2: cursor = db.cursor()

    Crea un cursor a partir de la conexión db. El cursor es un objeto que permite ejecutar comandos SQL y manipular los resultados de las consultas.

Paso 3: cursor.execute(...)

    Ejecuta la consulta SQL INSERT INTO posts .... Aquí se insertan tres valores (autor, contenido, fecha_creacion) en la tabla posts.
    La parte RETURNING id permite obtener el valor del campo id de la fila recién insertada sin tener que ejecutar una segunda consulta para recuperarlo.

Paso 4: post_id = cursor.fetchone()[0]

    Llama a cursor.fetchone() para recuperar el resultado de la consulta. Este método devuelve una fila como una tupla (en este caso, solo contiene el id del nuevo registro).
    cursor.fetchone()[0] toma el primer (y único) valor de esta tupla, asignándolo a post_id, que contiene el id del registro insertado.

Paso 5: db.commit()

    Confirma los cambios en la base de datos. Esto guarda la operación INSERT de forma permanente.

Paso 6: cursor.close()

    Cierra el cursor, liberando los recursos que utilizaba.

Paso 7: return post_id

    Devuelve el id del nuevo registro para que pueda ser utilizado en otro lugar del código.



app.py
    importamos de app crear_app que esta en el archivo __init__
    crear_app es una funcion que crea una aplicacion Flask __name__ quiere decir que es el modulo actual esto ayuda a flask para encontrar los archivos y recursos, y configura las rutas relativas.
    en app.config from_object estan las configuraciones de la base de datos
    app.register_blueprint en flask es una forma de organizar el codigo de manera modular
    menu.bp tiene las rutas y logicqa para las funcionalidades, cuadno registramos el blueprint se agregan esas rutas a la app principal
    blueprint es para organizar y estructurar una aplicacion con varios modulos. lo que hace es dividir la aplicacion en partes logicas para que sea mas facil de mantener y escalar.

    return app, se retorna la app
    os es para las carpetas del sistema operativo


en utils.db
tenemos la funciones para acceder a la base de datos, en este caso la conectamos con postgresql
tambien esta la funcion para cerrar la base de datos
init_app cierra la conexion cuadno ya no se necesita acceso a la mismqa


Routes/menu.py
Las routes vienen a ser como los controladores en mvc actuando de manera similar

bp = Blueprint('menu', __name__, url_prefix='/api')
recibe la solicitud, 